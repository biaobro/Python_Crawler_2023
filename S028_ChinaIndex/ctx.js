/*
@File               : ctx.js
@Project            : S028_ChinaIndex
@CreateTime         : 2023/3/13 16:08
@Author             : biaobro
@Software           : PyCharm
@Last Modify Time   : 2023/3/13 16:08 
@Version            : 1.0
@Description        : None
*/

const CryptoJS = require('crypto-js')
const crypto = require('crypto')

function aseDecrypt(data, lastFetchTime){
    // 这里用到的是AES解密
    // i 是 密钥
    // a 是 偏移量
    // 在这里，i 和 a 的值是相同的，得到的结果都是1个字典，内部包括1个字节数组，和1个sigBytes 变量
    const i = CryptoJS.enc.Utf8.parse(lastFetchTime + '000'),
        a = CryptoJS.enc.Utf8.parse(lastFetchTime + '000'),

        // 这是AES解密固定写法
        s = CryptoJS.AES.decrypt(data.toString(), i, {iv: a}).toString(CryptoJS.enc.Utf8).toString();
    return JSON.parse(s)
}

const eTest = {
    "data": "",
    "isEncrypt": 1,
    "result": 1,
    "fetchTime": 0,
    "loginStatus": 0,
    "totalNo": 0,
    "residueNum": 0,
    "updatedNum": 0,
    "pageNum": 0,
    "pageLimit": 0,
    "lastFetchTime": 1678516035095
}
// console.log(aseDecrypt(e.data, e.lastFetchTime))

// 对于这个case 来讲，e 是固定值为：{"channel": "movielist"}
function getSign(e) {
    delete e.sign;
    for (var t = [], n = Object.keys(e).sort(), r = 0; r < n.length; r++) {
        var i = n[r]
          , a = e[i];
        t.push(i),
        t.push(a)
    }
    t.push("iIndex");
    var s = t.join("_")
        // s 会得到固定值 "channel_movielist_iIndex"
      , c = Vie(s);
    // return c
    return c.toString()
}

// vie() 经过测试，实际是 md5 加密
// 因为输入固定，所以输出也固定，这部分可以直接使用固定值
function Vie(s){
    const hash = crypto.createHash('md5')
    return hash.update(s).digest('hex')
}
// sTest = "channel_movielist_iIndex"
// console.log(Vie(sTest))